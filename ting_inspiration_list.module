<?php
/**
 * @file
 * Enables listing the newest materials .
 */

include_once 'ting_inspiration_list.features.inc';

// Default cache lifetime for term list (10 days).
define('TING_INSPIRATION_LIST_DEFAULT_CACHE_LIFETIME', 10); 
// Default amount of term lists to cache each night.
define('TING_INSPIRATION_LIST_DEFAULT_CACHE_AMOUNT', 5); 

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_inspiration_list_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_theme().
 */
function ting_inspiration_list_theme($existing, $type, $theme, $path) {
  return array(
    'ting_inspiration_list' => array(
      'variables' => array('title' => NULL, 'results' => NULL),
      'template'  => 'ting-inspiration-list',
      'path' => $path . '/templates',
    ),
    'covers_search_results' => array(
      'variables' => array('results' => NULL),
      'template'  => 'covers-search-result',
      'path' => $path . '/templates',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ting_inspiration_list_menu() {
  $items = array();
  $items['admin/config/ting/inspiration-list'] = array(
    'title' => 'Inspiration list settings',
    'description' => t('Manage settings for the ting inpiration list module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_inspiration_list_admin_form'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ting_inspiration_list.admin.inc',
  );
  $items['ting/krimisite/minedata'] = array(
    'title' => 'Get data from well',
    'description' => t('Get data from well'),
    'page callback' => 'ting_inspiration_list_mine_data',
    'access arguments' => array('administer ting settings'),
  );
  return $items;  
}

function ting_inspiration_list_mine_data() {
  print ("hello");
  //$query = "krimi AND facet.category=voksenmaterialer AND facet.acSource=bibliotekskatalog";

  $holdings = ting_inspiration_list_parse_holdings_data();

  //$num_deleted = db_delete('ting_inspiration_list_holding_data')
  // ->execute();
  
  $query = db_query('SELECT * FROM ting_inspiration_list_holding_data');
  $result = $query->fetchAll();
  $ids_in_db = array();
  foreach ($result as $record) {
     $ids_in_db[$record->id] = $record->id; 
  }
  
  foreach ($holdings as $id => $holding_count) {
    if (!array_key_exists($id, $ids_in_db)) {
    $nid = db_insert('ting_inspiration_list_holding_data')
            ->fields(array(
                'title' => ' ',
                'id' => $id,
                'ownerid' => ' ',
                'localid' => ' ',
                'url' => ' ',
                'holding' => $holding_count,
                'objectids' => ' ', 
            ))
            ->execute();
    }
  }
  $query = db_query('SELECT * FROM ting_inspiration_list_holding_data');
  $result = $query->fetchAll();
  foreach ($result as $record) {
    file_put_contents("/var/www/drupalvm/drupal/debug/krim1.txt", print_r($record, TRUE), FILE_APPEND);
    //print $record->title . ' ' . $record->id . ' ' .  $record->objectids . ' ' . $record->holding . "<br/>";
  }
}

function ting_inspiration_list_get_holdings($holdings, $ids) {
  //Todo handle no holdings
  //$noholdings = array();
  foreach ($ids as $collection_object) {
    $collection_object->holdingCount = 0;
    foreach ($collection_object->ids as $id) {
      if (array_key_exists($id, $holdings)) {
        $collection_object->holdingCount += $holdings[$id];
      }
    }
  }
  file_put_contents("/var/www/drupalvm/drupal/debug/krim23.txt", print_r($ids, TRUE), FILE_APPEND);
  return $ids;
}

function ting_inspiration_list_parse_holdings_data( ) {
   $holding_data = file('/var/www/drupalvm/drupal/bestand.txt'); 
   $holding_results = array();
   foreach ($holding_data as $holding_item) {
     $item = explode(',', $holding_item);
     $faust = $item[1];
     $count = $item[3];
     
     if (isset($faust) && isset($count)) {
      if (array_key_exists($faust, $holding_results)) {
        $holding_results[$faust] += $count;
      } else {
        $holding_results[$faust] = $count;
      }
    }
  }
   file_put_contents("/var/www/drupalvm/drupal/debug/holdings.txt", print_r($holding_results, TRUE), FILE_APPEND);
   return $holding_results;
}

function ting_inspiration_list_search($query, $title = 'SÃ¸geresultat', $number_of_objects = 100) {
  $raw_search_results = ting_inspiration_list_get_raw_result('(' . $query . ') AND (krimi AND facet.category=voksenmaterialer AND facet.acSource=bibliotekskatalog)', $number_of_objects);
  $ids = ting_inspiration_list_process_search_results($raw_search_results);
  $holding_data = ting_inspiration_list_get_holdings_from_db();
  //file_put_contents("/var/www/drupalvm/drupal/debug/krim16.txt", print_r($ids, TRUE), FILE_APPEND);
  //file_put_contents("/var/www/drupalvm/drupal/debug/krim18.txt", print_r($raw_search_results, TRUE), FILE_APPEND);
  $result = array();
  foreach ($ids as $collection_object) {
    $holding_count = 0;
    $primary_object = null;
    $top_count = 0;
    foreach ($collection_object as $id => $object) {
      if ($primary_object == null) {
        $primary_object = $object;
      }
      if (array_key_exists($id, $holding_data)) {
        if ($holding_data[$id] > $top_count) {
          $top_count = $holding_data[$id];
          $primary_object = $object;
        }
        $holding_count += $holding_data[$id];
      }
      file_put_contents("/var/www/drupalvm/drupal/debug/krim-object.txt", print_r($object, TRUE), FILE_APPEND);
      //file_put_contents("/var/www/drupalvm/drupal/debug/krim-object.txt", print_r($id . ' ' . $holding_data[$id], TRUE), FILE_APPEND);
    }
    $primary_object->holdingCount = $holding_count;
    file_put_contents("/var/www/drupalvm/drupal/debug/krim-object.txt", print_r('Primary    ', TRUE), FILE_APPEND);
    file_put_contents("/var/www/drupalvm/drupal/debug/krim-object.txt", print_r($primary_object, TRUE), FILE_APPEND);
//    file_put_contents("/var/www/drupalvm/drupal/debug/krim-primary.txt", print_r($primary_object, TRUE), FILE_APPEND);
    $result[$primary_object->localId] = $primary_object;
  }
  uasort($result, 'ting_inspiration_list_sort_holding_count');
  if (count($result) > $number_of_objects) {
    $result = array_slice($result, 0, $number_of_objects, true);
  }
  file_put_contents("/var/www/drupalvm/drupal/debug/krim17.txt", print_r($result, TRUE), FILE_APPEND);

  return ting_inspiration_list_render_cover($result, $title);
 
} 

function ting_inspiration_list_find_primary_object($collection, $holding_data) {
  $top_count = 0;
  $primary_object = null;
  foreach ($collection as $collection_object) {
    if ($primary_object == null) {
      $primary_object = $collection_object;
    }
    $id = explode(':', $collection_object);
    $id = $id[1];
    if (array_key_exists($id, $holding_data)) {
      if ($holding_data[$id] > $top_count) {
        $primary_object = $collection_object;
        $top_count = $holding_data[$id];
      }
    }
  }
  return $primary_object;
}

function ting_inspiration_list_get_holdings_from_db() {
  $query = db_query('SELECT * FROM ting_inspiration_list_holding_data');
  $result = $query->fetchAll();
  $holding_data = array();
  foreach ($result as $record) {
     $holding_data[$record->id] = $record->holding;   
  }
  return $holding_data;
}

function ting_inspiration_list_render_recommendations($title, $recommendations) {
  $query = array();
  $results = array();
  foreach ($recommendations as $rec) {
    $query[] = 'rec.id="' . $rec->pid . '"';
  }
  $query_string = (implode(' OR ', $query));
  $objects = ting_open_platform_search_collection($query_string);
  file_put_contents("/var/www/drupalvm/drupal/debug/open-objects.txt", print_r($objects, TRUE), FILE_APPEND);
  $holding_data = ting_inspiration_list_get_holdings_from_db();
  foreach ($objects->data as $object) {
    $coverObject = new CoverObject();
    $coverObject->title = $object->title[0];
    $coverObject->creators = $object->creator;
    $id = ting_inspiration_list_find_primary_object($object->collection, $holding_data);
    $coverObject->uri = 'ting/object/' . $id;
    $coverObject->id = $id;
    $results[] = $coverObject;
  }

  file_put_contents("/var/www/drupalvm/drupal/debug/rec2.txt", print_r($results, TRUE), FILE_APPEND);
  return ting_inspiration_list_render_cover($results, $title);
}

/**
 * Because there is a lot of dataprocessing in showing a inspiration page we prebuild 
 * them during the night and cache the result.
 */
function ting_inspiration_list_cron() {
  // We only want to update the cache once a night between 00:00 and 06:00.
  $hour = 2; //date('G');
  if ($hour >= 0 && $hour <= 6) {
    ini_set('memory_limit', '512M'); // Is this needed?
    // Check to see if tonights updates already have been run.
    $month = date('n');
    $day = date('j');
    $year = date('Y');
    $midnight_time = mktime(0, 0, 0, $month, $day, $year);    
    $query = db_select('cache_history_ting_inspiration_list', 'chtil')
      ->fields('chtil', array('nid', 'time'))
      ->condition('time', $midnight_time, '>=');
    $cache_history_count = $query->countQuery()->execute()->fetchField();
    $queue = DrupalQueue::get('ting_inspiration_list_cache_queue');
    // If there was no cache updates for tonight in the history and the queue
    // is empty, we go ahead and start tonights updates. 
    if ($cache_history_count == 0 && $queue->numberOfItems() == 0) {
      $cache_amount = _ting_inspiration_list_get_cache_amount();
      $query = db_select('cache_ting_inspiration_list', 'ctil')
        ->fields('ctil', array('cid', 'created'))
        ->orderBy('created', 'ASC')
        ->range(0, $cache_amount);
      $result = $query->execute();
      foreach ($result as $record) {
        $nid = _ting_inspiration_list_get_nid_from_cid($record->cid);
        $node = node_load($nid);
        $queue->createItem($node);
      }
    }
    // Clean up old rows from the history table.
    $history_treshold = time() - (30 * 24 * 3600);  
    $query = db_delete('cache_history_ting_inspiration_list')
      ->condition('time', $history_treshold, '<');
    $delete_count = $query->execute();
  }  
}

/**
 * Helper function to fetch cache amount from the database.
 */
function _ting_inspiration_list_get_cache_amount() {
  return variable_get('ting_inspiration_list_cache_amount', 
    TING_INSPIRATION_LIST_DEFAULT_CACHE_AMOUNT);
}

/**
 * Helper function to fetch cache lifetime from the database.
 */
function _ting_inpiration_list_get_cache_lifetime() {
  $cache_lifetime = variable_get('ting_inspiration_list_cache_lifetime', 
    TING_INSPIRATION_LIST_DEFAULT_CACHE_AMOUNT);
  return ($cache_lifetime * 24 * 60 * 60);
}

/**
 * Helper function to get cid from nid.
 */
function _ting_inspiration_list_get_cid_from_nid($nid) {
  return 'ting_inspiration_list:' . $nid;
}

/**
 * Helper function to get nid from cid.
 */
function _ting_inspiration_list_get_nid_from_cid($cid) {
  $cid_explode = explode(':', $cid);
  return (isset($cid_explode[1]) ? $cid_explode[1] : 0);
}

/**
 * Implement hook cron_queue_info
 * Create a Queue for updating inspiration pages. This way we don't timeout during a long cron job.
 * 
 * @return array
 *  Array declaring the queue.
 */
function ting_inspiration_list_cron_queue_info() {
  $queues['ting_inspiration_list_cache_queue'] = array(
    'worker callback' => 'ting_inspiration_list_get_inspration_list_covers',
    'time' => 600,
  );
  return $queues;
}

/**
 * Implement hook node_presave
 * Clear cached inspiration list when updateing the node.
 *
 */
function ting_inspiration_list_node_presave ($node) {
  if ($node->type == 'inspiration_list_page') {
    cache_clear_all(_ting_inspiration_list_get_cid_from_nid($node->nid), 'cache_ting_inspiration_list');
  }
}

/**
 * Main method for building a inspiration list from the query given in the node.
 *
 * @param node $node
 *  The inspiration list page.
 * @return array
 *  A array of lightweight of objects with the data needed to show a material on a inspiration list page.
 */
function ting_inspiration_list_get_inspration_list_covers($node) {
  $number_of_raw_results = ting_inspiration_list_number_of_raw_result($node);

  //Perform multiple queries against the well and get all the ids
  $query = ting_inspiration_list_build_search_query($node);
  $raw_search_results = ting_inspiration_list_get_raw_result($query, $number_of_raw_results);
  $ids = ting_inspiration_list_process_search_results($raw_search_results);

  //Check how many copies of each material there is against the local library system.
  $availablity_info = ting_inspiration_list_get_availability_info($ids);
  $ranked_ids = ting_inspiration_list_process_availability($availablity_info, $ids);

  $cached_results = ting_inspiration_list_build_search_result($ranked_ids , $node);
  
  ting_inspiration_list_set_cached_lists($node, $cached_results);

  return $cached_results;
}


/**
 * Builds a list of materials which have a covers.
 *
 * @param TingClientSearchResult $search_result
 *  Search result containg 2x the number og objects needed. This is because not every material has a cover.
 * @param node $node
 *  The inspiration list page.
 * @return array $cached_results
 *   A array of lightweight of objects with the data needed to show a material on a inspiration list page.
 */
function ting_inspiration_list_build_search_result($ranked_results, $node) {
  $cached_results = NULL;

  $number_of_objects = ting_inspiration_list_number_of_objects($node);
  module_load_include('covers.inc', 'ting_inspiration_list');
  //We check 3x number of objects if they have a image beacause not every object has a image.
  $ranked_results = ting_inspiration_list_check_covers($ranked_results, $number_of_objects * 3);
  $number_found = 0;
  foreach ($ranked_results as $object) {
    // If there is a image
    if ($object->hasImage) {
      $cached_results[] = $object;
      $number_found++;
      if ($number_found >= $number_of_objects) {
        break;
      }
    }
  }

  return $cached_results;
}

/**
 * Renders a inspiration list.
 *
 * @param array $cached_results
 *   A array of lightweight of objects with the data needed to show a material on a inspiration list page..
 * @param node $node
 *  The inspiration list page.
 * @return array
 *  A render array containg the inspiration list.
 */
function ting_inspiration_list_render_cover($cached_results, $title) {
  $results = array();
  foreach ($cached_results as $object) {
    // Add the result to an array for the "ting_search_results" theme
    // function.      
    $image = theme('ting_object_cover', array('elements' => array('#object' => $object, '#image_style' => 'ting_inspiration_list_cover')));
    $options = array(
      'html' => TRUE,
      'attributes' => array('title' => $object->title),
    );
    if (isset($object->creators[0])) {
      $creators = $object->creators[0];
    } else {
      $creators = '';
    }
    $title_info = '<div class="ting-inspiration-item-title">' . $object->title . '<br/><b>' . $creators  . '</b></div>';
    $item = $image . $title_info;
    $results[] = array(
      'snippet' => l($item, $object->uri, $options)
    );
  }
    // Set default page result.
  $content = array(
    '#theme' => 'ting_inspiration_list',
    '#title' => $title,
  );

  // If any search result have been found add them to the array.
  if (!empty($results)) {
    $content['#results'] = array(
      '#theme' => 'covers_search_results',
      '#results' => $results,
    );
  }
  return $content;
}

/**
 * Implements default preprocess function for the ting inspiration list.
 */
function template_preprocess_ting_inspiration_list(&$vars, $hook) {
  $path = drupal_get_path('module', 'ting_inspiration_list');
  drupal_add_css($path . '/css/ting_inspiration_list.css');
}

/**
 * Get the number of of objects to be shown.
 *
 * @param node $node
 *  The inspiration list page.
 * @return int
 *  Number of objects.
 */
function ting_inspiration_list_number_of_objects($node) {
  $number_per_row = variable_get('ting_genre_pages_default_number_per_row', 5);
  $number_of_rows = 3;

  $items = field_get_items('node', $node, 'field_inspiration_row_count');
  if (isset($items) && is_array($items) && isset($items[0]['value'])) {
    $number_of_rows = $items[0]['value'];
  }
  return $number_of_rows * $number_per_row;
}


/**
 * Number of objects to get from the datawell when processing data.
 * A higher number gives better result but costs performancewise.
 * 
 * @param node $node
 *  The inspiration list page.
 * @return int
 *  Number of objects to get from the data well.
 */
function ting_inspiration_list_number_of_raw_result($node) {
  $items = field_get_items('node', $node, 'field_inspiration_raw_count');
  if (isset($items) && is_array($items) && isset($items[0]['value'])) {
    $number_of_raw_results = $items[0]['value'];
  } else {
    $number_of_raw_results = variable_get('ting_genre_pages_default_number_raw_results', 200);
  }
  return $number_of_raw_results;
}


/**
 * Builds a search query string against the Data Well.
 *
 * @param type $entity
 *  A new materials entity content type.
 * @return string
 *  Ting data well search string.
 */
function ting_inspiration_list_build_search_query($entity) {
  // Get search query from the entity.
  $items = field_get_items('node', $entity, 'field_inspiration_search');
  $query = $items[0]['value'];
  $query = '(' . $query . ')';

  return $query;
}


/**
 * Gets the objects to which ara going to be included in dataprocessing from the Data Well.
 *
 * @param string $query
 *  The query to be performed
 * @param int $number_of_objects
 *  The number of objects to get. A higher number gives better result but costs performancewise.
 * @return TingClientSearchResult
 *  The search result.
 */
function ting_inspiration_list_get_raw_result($query, $number_of_objects = 100, $page = 0) {
  $results = array();
  $objects_per_request = 50;
  $i = $page;
  $number_of_objects_retrieved = 0;
  do {
    $search_result = ting_inspiration_list_do_search($query, $i, $objects_per_request);
    if ($search_result && is_array($search_result->collections)) {
    array_push($results, $search_result);
    $i++;
    $number_of_objects_retrieved += $objects_per_request;
    } else {
      break; //Search results was false.
    }
  } while ($search_result->more && $number_of_objects_retrieved < $number_of_objects);
  return $results;
}

/**
 *Extract ids from the search results.
 *
 * @param TingClientSearchResult $search_results
 *  The search result.
 * @return array
 *  The ids from the search result.
 */
function ting_inspiration_list_process_search_results($search_results) {
  $ids = array();
  if ($search_results) {
    foreach ($search_results as $search_result)
      if (is_array($search_result->collections)) {
        foreach ($search_result->collections as $collection) {
          $ids[$collection->id] = array();
          foreach ($collection->reply->objects as $object) {
file_put_contents("/var/www/drupalvm/drupal/debug/krim-tingobject.txt", print_r( $object, TRUE), FILE_APPEND);
            $coverObject = new CoverObject();

            $coverObject->title = ting_inspiration_list_get_title($object);
            $coverObject->creators = ting_inspiration_list_get_creators($object);
            $coverObject->localId = $object->localId;
            $coverObject->ownerId = $object->ownerId;
            $coverObject->collectionTitle = $collection->title;
            // Get link to link the result back to the collection.
            $uri = entity_uri('ting_object', $object);
            $coverObject->uri = $uri['path'];
            $coverObject->id = $object->id;

            $ids[$collection->id][$coverObject->localId] = $coverObject;
          }
        }
      }
    file_put_contents("/var/www/drupalvm/drupal/debug/krim-ids.txt", print_r($ids, TRUE), FILE_APPEND);
  }
  return $ids;
}

/**
 * Gets the number of holdings from the Library System provider.
 *
 * @param array $ids
 *  The ids from the search result.
 * @return array
 *  Holdings info.
 */
function ting_inspiration_list_get_availability_info($ids) {
  $provider_ids = array();
  foreach ($ids as $id) {
    $provider_ids[] = $id->localId;
  }
  $availability_info = array();
  $offset = 0;
  if (count($provider_ids) > 0) {
    while (count($provider_ids) > $offset) {
      $slice = array_slice($provider_ids, $offset, 50, true);
      try {
      $holdings = ding_provider_invoke('availability', 'holdings', $slice);
      foreach ($holdings as $id => $holding) {
         $availability_info[$id] = $holding;
      }
      $offset += 50;  
      } catch (Exception $e) {
         file_put_contents("/var/www/drupalvm/drupal/debug/krimi14.txt", print_r("error  ", TRUE), FILE_APPEND);
      }
    }
  }
  return $availability_info;
}

/**
 * Sorts all the ids (local_id and owner_id) according to number of holdings.
 *
 * @param array $availablity_info
 *  Holdings info.
 * @param array $ids
 *  The ids from the search result.
 * @return array
 *  The ids from the search result sorted according to holdings.
 */
function ting_inspiration_list_process_availability($availablity_info, $ids) {
  if ($availablity_info) {
    foreach ($availablity_info as $id => $info) {
      $count = 0;
      if (isset($info['holdings']) && !empty($info['holdings'])) {
        foreach ($info['holdings'] as $holding) {
          if (isset($holding['total_count'])) {
            $count += $holding['total_count'];
          }
        }       
      }
      $ids[$id]->holdingCount = $count;
    }
  }
  uasort($ids, 'ting_inspiration_list_sort_holding_count');
  return $ids;
}

/**
 * Performs a query against the Data Well and returns the objects.
 *
 * @param string @query
 *  The query string.
 * @param $page int
 *  The page number.
 * @return TingClientSearchResult
 *  The search result.
 *
 */
function ting_inspiration_list_do_search($query, $page = 0, $num_per_page = 10) {
  // Load the ting client.
  module_load_include('client.inc', 'ting');

  // Build search options and ensure that they are sorted corretly.
  $options = array();
  $options['enrich'] = TRUE;
  //$options['collectionType'] = 'manifestation';

  // Search the data well.
  $search_result = array();
  try {
     $search_result = ting_do_search($query, $page + 1, $num_per_page, $options);
  } catch (TingClientException $e) {
    watchdog('ting_inspiration_list', 'Failed to get objects from the Data well: â@messageâ', array('@message' => $e->getMessage(), WATCHDOG_ERROR));
  }
  return $search_result;
}

/**
 * Helper function for sorting array according to holding count.
 *
 * @param array $a
 *  Array containing holding count.
 * @param array $b
 *  Array containing holding count.
 * @return int
 *  A int indicating if element is before or after.
 */
function ting_inspiration_list_sort_holding_count($a, $b) {
  if (!isset($a->holdingCount )) {
    return 1;
  }
  if (!isset($b->holdingCount )) {
    return -1;
  }
  if ($a->holdingCount  == $b->holdingCount ) {
    return 0;
  }
  return ($a->holdingCount  < $b->holdingCount ) ? 1 : -1;
}


/**
 * Set a cached list of lightweight inspiration list object.
 *
 * @param node $node
 *  The inspiration list page.
 * @param array $cached_results
 *  A array of lightweight of objects with the data needed to show a material on a inspiration list page.
 */
function ting_inspiration_list_set_cached_lists($node, $cached_results) {
  $cid = _ting_inspiration_list_get_cid_from_nid($node->nid);
  // Save cache for a week.
  cache_set($cid, $cached_results, 'cache_ting_inspiration_list', time() + 604800);
  // Update the cache history table.
  $query = db_insert('cache_history_ting_inspiration_list');
  $query->fields(array(
    'nid' => $node->nid,
    'time' => time(),
  ));
  $query->execute();
}

  function ting_inspiration_list_get_title($object) {
    $title = FALSE;
    if (!empty($object->record['dc:title'])) {
      // Use first title with dkdcplus:full if available.
      if (isset($object->record['dc:title']['dkdcplus:full'])) {
        $title = $object->record['dc:title']['dkdcplus:full'][0];
      }
      else {
        $title = $object->record['dc:title'][''][0];
      }
    }
    return $title;
  }
  
    function ting_inspiration_list_get_creators($object) {
    $creators = array();
    if (!empty($object->record['dc:creator'])) {
      foreach ($object->record['dc:creator'] as $type => $dc_creator) {
        if ($type != 'oss:sort') {
          $creators = array_merge($creators, $dc_creator);
        }
      }
    }
    return $creators;
  }


/**
 * Lightweight object representing a material in a inspiration list. 
 * The object is lightweight to save space in database caching.
 */
class CoverObject {

  public $title;
  public $creators;
  public $localId;
  public $ownerId;
  public $collectionTitle;
  public $uri;
  public $holdingCount;
  public $hasImage;
  public $id;
}
