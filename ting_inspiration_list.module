<?php
/**
 * @file
 * Enables listing the newest materials .
 */

//include_once 'ting_inspiration_list.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_inspiration_list_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_theme().
 */
function ting_inspiration_list_theme($existing, $type, $theme, $path) {
  return array(
    'ting_inspiration_list' => array(
      'variables' => array('title' => NULL, 'legend' => NULL, 'availability_legend' => NULL, 'results' => NULL),
      'template'  => 'ting-new-materials',
      'path' => $path . '/templates',
    ),
  );
}

/**
 * Implements hook_node_validate().
 *
 * Check that the search query entered on the New materials node yield any
 * results.
 */
//function ting_inspiration_list_node_validate($node, $form, &$form_state) {
//  if ($node->type == 'new_materials') {
//    // Search the data well with the query from the node.
//    $query = ting_inspiration_list_build_search_query($node, TRUE);
//    $results = ting_inspiration_list_do_search($query);
//
//    if ($results->numTotalObjects == 0) {
//      // There may not be any results with in the limit (time period). So try a
//      // search without the limit.
//      $query = ting_inspiration_list_build_search_query($node, FALSE);
//      $results = ting_inspiration_list_do_search($query);
//      if ($results->numTotalObjects == 0) {
//        form_set_error('field_ting_inspiration_list_search', t('The query did not yield any results.'));
//      }
//      else {
//        form_set_error('field_ting_inspiration_list_limit', t('The query did not yield any results with in the limit given.'));
//      }
//    }
//  }
//}

/**
 * Implements hook_node_update().
 *
 * Clear cache of search results (used in the panels plugin) for the node being
 * updated.
 */
//function ting_inspiration_list_node_update($node) {
//  if ($node->type == 'new_materials') {
//    cache_clear_all('ting_inspiration_list_' . $node->nid, 'cache', TRUE);
//  }
//}

function ting_inspiration_list_search_alma_query($alma_query_string, $number_of_results_to_fetch) {
  $ids = array();
  $alma_ids = array();
  $start_number = 1;
  $number_results_per_query = 50;
  do {
    $results = alma_search_search($alma_query_string, $start_number, $number_results_per_query);
    $start_number = $results['stop_number'] + 1;
    if (isset($results) && isset($results['alma_ids'])) {
     $alma_ids = array_merge($alma_ids, $results['alma_ids']);
    }
  } while (isset($results) && $results['stop_number'] + 1 < $results['number_of_records_total'] && $results['stop_number'] < $number_of_results_to_fetch);
  foreach ($alma_ids as $alma_id) {
    $ids[$alma_id] = array(
      'ownerId' => '773000',
      'localId' => $alma_id,
    );
  }
  return $ids ;
}


/**
 * Builds a search query string against the Data Well.
 *
 * @param type $entity
 *  A new materials entity content type.
 * @param type $limit_query
 *  If TRUE the search query will be limited to the number of months given in
 *  the entity. Default TRUE.
 * @return string
 *  Ting data well search string.
 */
function ting_inspiration_list_build_search_query($entity) {
  // Get search query from the entity.
  $items = field_get_items('node', $entity, 'field_inspiration_list_search');
  $query = $items[0]['value'];
  $query = '(' . $query . ')';

  return $query;
}

/**
 * Limit a search query expression to a specified number of months.
 *
 * @param int $limit
 *  The number of months back to limit the results.  Min 1 and max 12 month. 0
 *  means unlimited.
 * @return string $query
 *  The limit by month search query expression.
 */
function ting_inspiration_list_make_limit_query($limit = 0) {
  $query = "";

  if ($limit > 0) {
    // Get current date (defaults to now).
    $date = new DateTime();
    $query = ' AND sort.acquisitionDate=(' . $date->format('Ym') . '*';
    for ($i = 1; $i <= $limit; $i++) {
      $date->sub(date_interval_create_from_date_string('1 month'));
      $query .= ' OR ' . $date->format('Ym') . '*';
    }
    $query .= ')';
  }

  return $query;
}

function ting_inspiration_list_get_raw_result($query, $number_of_objects = 100) {
  $results = array();
  $objects_per_request = 50;
  $i = 0;
  $number_of_objects_retrieved = 0;
  do {
    $search_result = ting_inspiration_list_do_search($query, $i, $objects_per_request);
    if ($search_result && is_array($search_result->collections)) {
    //file_put_contents("/home/quickstart/work/debug/debuginspiration3.txt", print_r($search_result, TRUE), FILE_APPEND);
    //file_put_contents("/home/quickstart/work/debug/debuginspiration5.txt", print_r(count($search_result->collections) . ' ', TRUE), FILE_APPEND);
    array_push($results, $search_result);
    $i++;
    $number_of_objects_retrieved += $objects_per_request;
    } else {
      break; //Search results was false.
    }
  } while ($search_result->more && $number_of_objects_retrieved < $number_of_objects);
  return $results;
}

function ting_inspiration_list_process_search_results($search_results) {
  $ids = array();
  if ($search_results) {
    foreach ($search_results as $search_result)
      if (is_array($search_result->collections)) {
        foreach ($search_result->collections as $collection) {
          foreach ($collection->reply->objects as $object) {
              if (isset($object->ownerId) && isset($object->localId)) {
                 $ids[$object->localId] = array (
                   'ownerId' => $object->ownerId,
                   'localId' => $object->localId,
                 );
              }
          }
        }
      }
  }
  return $ids;
}

function ting_inspiration_list_get_availability_info($ids) {
  $provider_ids = array();
  foreach ($ids as $id) {
     if ($id['ownerId'] == '773000') {
       $provider_ids[] = $id['localId'];
     }
  } 
  $availability_info = array();
  $offset = 0;
  if (count($provider_ids) > 0) {
    while (count($provider_ids) > $offset) {
      $slice = array_slice($provider_ids, $offset, 50, true);
      $holdings = ding_provider_invoke('availability', 'holdings', $slice);
      foreach ($holdings as $id => $holding) {
         $availability_info[$id] = $holding;
      }
      $offset += 50;      
    }
  }
  return $availability_info;
}

function ting_inspiration_list_process_availability($availablity_info, $ids) {
  if ($availablity_info) {
    foreach ($availablity_info as $id => $info) {
      $count = 0;
      if (isset($info['holdings'])) {
        foreach ($info['holdings'] as $holding) {
          if (isset($holding['total_count'])) {
            $count += $holding['total_count'];
          }
        }       
      }
      $ids[$id]['holding_count'] = $count;
    }
  }
  uasort($ids, 'ting_inspiration_list_sort_holding_count');
  return $ids;
}

function ting_inspiration_list_make_list_query($ids, $page = 0, $number_per_page = 10) {
  $query = "";
  $offset = ($page) * $number_per_page;
  if (count($ids) > $offset) {

    $result_ids = array_slice($ids, $offset, $number_per_page);
    $first = true;
    foreach ($result_ids as $id) {
      if ($first) {
        $query .= $id['localId'];
        $first = false;
      } else {
        $query .= ' OR ' . $id['localId'];
      }
    }
  }
  return $query;
}

/**
 * Performs a query against the Data Well and returns the objects.
 *
 * @param string @query
 *  The query string.
 * @param $page int
 *  The page number.
 * @return TingClientSearchResult
 *  The search result.
 *
 */
function ting_inspiration_list_do_search($query, $page = 0, $num_per_page = 10) {
  // Load the ting client.
  module_load_include('client.inc', 'ting');

  // Build search options and ensure that they are sorted corretly.
  $options = array();
  $options['enrich'] = TRUE;
  $options['collectionType'] = 'manifestation';

  // Search the data well.
  $search_result = array();
  try {
    $search_result = ting_do_search($query, $page + 1, $num_per_page, $options);
  } catch (TingClientException $e) {
    watchdog('ting_inspiration_list', 'Failed to get objects from the Data well: “@message”', array('@message' => $e->getMessage(), WATCHDOG_ERROR));
  }

  return $search_result;
}

/**
 * Callback function for sorting by holdingcounr.
 */
function ting_inspiration_list_sort_holding_count($a, $b) {
  if (!isset($a['holding_count'])) {
    return 1;
  }
  if (!isset($b['holding_count'])) {
    return -1;
  }
  if ($a['holding_count'] == $b['holding_count']) {
    return 0;
  }
  return ($a['holding_count'] < $b['holding_count']) ? 1 : -1;
}


/**
 * Gets a cached block of inpiration list in desired format.
 */
function ting_inspiration_list_get_cached_lists($query, $format) { 
  $cid = ting_inspiration_list_make_cache_string($query, $format);
  file_put_contents("/home/quickstart/work/debug/debuggenrecache3.txt", print_r($cid , TRUE), FILE_APPEND);
   if ($cache = cache_get(ting_inspiration_list_make_cache_string($query, $format), 'cache_ting_inspiration_list')) {
     return $cache;
   } else {
     return null;
   }
}

/**
 * Sets a cached block of inpiration list in desired format.
 */
function ting_inspiration_list_set_cached_lists($query, $format, $block) {  
   $cid = ting_inspiration_list_make_cache_string($query, $format);
   // Save cache for a week.
   cache_set($cid, $block, 'cache_ting_inspiration_list', time() + 604800);
}

/**
 * Helper function to get CID.
 */
function ting_inspiration_list_make_cache_string($query, $format) {
   return md5($query . $format);
}
