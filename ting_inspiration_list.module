<?php
/**
 * @file
 * Enables listing the newest materials .
 */

// Default cache lifetime for term list (10 days).
define('TING_INSPIRATION_LIST_DEFAULT_CACHE_LIFETIME', 10); 
// Default amount of term lists to cache each night.
define('TING_INSPIRATION_LIST_DEFAULT_CACHE_AMOUNT', 5); 

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_inspiration_list_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_theme().
 */
function ting_inspiration_list_theme($existing, $type, $theme, $path) {
  return array(
    'ting_inspiration_list' => array(
      'variables' => array('title' => NULL, 'legend' => NULL, 'availability_legend' => NULL, 'results' => NULL),
      'template'  => 'ting-new-materials',
      'path' => $path . '/templates',
    ),
    'covers_search_results' => array(
      'variables' => array('results' => NULL),
      'template'  => 'covers-search-result',
      'path' => $path . '/templates',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ting_inspiration_list_menu() {
  $items = array();
  $items['admin/config/ting/inspiration-list'] = array(
    'title' => 'Inspiration list settings',
    'description' => t('Manage settings for the ting inpiration list module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_inspiration_list_admin_form'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ting_inspiration_list.admin.inc',
  );
  return $items;  
}

function ting_inspiration_list_init() {

  $test = 'En lille test...';
  //cache_clear_all('*', 'cache_ting_inspiration_list', TRUE);
  //file_put_contents("/home/drupalpro/debug/debuginsplist.txt", print_r($cids , TRUE), FILE_APPEND);
}

function ting_inspiration_list_cron() {
  // We only want to update the cache once a night between 00:00 and 06:00.
  $hour = 2; //date('G');
  if ($hour >= 0 && $hour <= 6) {
    ini_set('memory_limit', '512M'); // Is this needed?
    // Check to see if tonights updates already have been run.
    $month = date('n');
    $day = date('j');
    $year = date('Y');
    $midnight_time = mktime(0, 0, 0, $month, $day, $year);    
    $query = db_select('cache_history_ting_inspiration_list', 'chtil')
      ->fields('chtil', array('nid', 'time'))
      ->condition('time', $midnight_time, '>=');
    $cache_history_count = $query->countQuery()->execute()->fetchField();
    $queue = DrupalQueue::get('ting_inspiration_list_cache_queue');
    // If there was no cache updates for tonight in the history and the queue
    // is empty, we go ahead and start tonights updates. 
    if ($cache_history_count == 0 && $queue->numberOfItems() == 0) {
      $cache_amount = _ting_inspiration_list_get_cache_amount();
      $query = db_select('cache_ting_inspiration_list', 'ctil')
        ->fields('ctil', array('cid', 'created'))
        ->orderBy('created', 'ASC')
        ->range(0, $cache_amount);
      $result = $query->execute();
      foreach ($result as $record) {
        $nid = _ting_inspiration_list_get_nid_from_cid($record->cid);
        $node = node_load($nid);
        $queue->createItem($node);
      }
    }
    // Clean up old rows from the history table.
    $history_treshold = time() - (30 * 24 * 3600);  
    $query = db_delete('cache_history_ting_inspiration_list')
      ->condition('time', $history_treshold, '<');
    $delete_count = $query->execute();
  }  
}

/**
 * Helper function to fetch cache amount from the database.
 */
function _ting_inspiration_list_get_cache_amount() {
  return variable_get('ting_inspiration_list_cache_amount', 
    TING_INSPIRATION_LIST_DEFAULT_CACHE_AMOUNT);
}

/**
 * Helper function to fetch cache lifetime from the database.
 */
function _ting_inpiration_list_get_cache_lifetime() {
  $cache_lifetime = variable_get('ting_inspiration_list_cache_lifetime', 
    TING_INSPIRATION_LIST_DEFAULT_CACHE_AMOUNT);
  return ($cache_lifetime * 24 * 60 * 60);
}

/**
 * Helper function to get cid from nid.
 */
function _ting_inspiration_list_get_cid_from_nid($nid) {
  return 'ting_inspiration_list:' . $nid;
}

/**
 * Helper function to get nid from cid.
 */
function _ting_inspiration_list_get_nid_from_cid($cid) {
  $cid_explode = explode(':', $cid);
  return (isset($cid_explode[1]) ? $cid_explode[1] : 0);
}


function ting_inspiration_list_cron_queue_info() {
  $queues['ting_inspiration_list_cache_queue'] = array(
    'worker callback' => 'ting_inspiration_list_get_inspration_list_covers',
    'time' => 600,
  );
  return $queues;
}

/**
 * Cleare cache when updateing.
 */
function ting_inspiration_list_node_presave ($node) {
  if ($node->type == 'genre_page') {
    cache_clear_all(_ting_inspiration_list_get_cid_from_nid($node->nid), 'cache_ting_inspiration_list');
  }
}


function ting_inspiration_list_get_inspration_list_covers($node) {
  $number_of_raw_results = ting_inspiration_list_number_of_raw_result($node);
  $alma_query = field_get_items('node', $node, 'field_ddelibra_inspiration_list');
  if (!empty($alma_query[0]['value'])) {
    //Use alma to get results
    $query = $alma_query[0]['value'];
    $ids = ting_inspiration_list_search_alma_query($query, $number_of_raw_results);
  } else {
    //Use the datawell to get results. Build search query based on node fields.
    $query = ting_inspiration_list_build_search_query($node);
    $raw_search_results = ting_inspiration_list_get_raw_result($query, $number_of_raw_results);  
    $ids = ting_inspiration_list_process_search_results($raw_search_results);
  }
  
  $availablity_info = ting_inspiration_list_get_availability_info($ids);
  $ranked_ids = ting_inspiration_list_process_availability($availablity_info, $ids);

  $number_of_objects = ting_inspiration_list_number_of_objects($node) * 2;
  $list_query = ting_inspiration_list_make_list_query($ranked_ids, 0, $number_of_objects);
  $search_result = ting_inspiration_list_do_search($list_query, 0, $number_of_objects);

  $cached_results = ting_inspiration_list_build_search_result($search_result, $node);
  ting_inspiration_list_set_cached_lists($node, $cached_results);
  // Update the cache history table.
  $query = db_insert('cache_history_ting_inspiration_list');
  $query->fields(array(
    'nid' => $node->nid,
    'time' => time(),
  ));
  $query->execute();  
  return $cached_results;
}

function ting_inspiration_list_build_search_result($search_result, $node) {
   $cached_results = NULL;
  // Check if the search return any results.
  if ($search_result->numTotalObjects > 0) {
    $cover_ids = array();
    foreach ($search_result->collections as $collection) {
      $cover_ids[] = array(
        'local_id' => $collection->primary_object->localId,
        'owner_id' => $collection->primary_object->ownerId
      );
    }
    $cover_result_ids = ting_inspiration_list_check_covers($cover_ids);

    $number_of_objects = ting_inspiration_list_number_of_objects($node);
    $number_found = 0;
    $results = array();

    foreach ($search_result->collections as $collection) {
      // If there is a image
      if (isset($cover_result_ids[$collection->primary_object->localId]) && $cover_result_ids[$collection->primary_object->localId]) {
        $object = new CoverObject();
        $object->title = $collection->primary_object->title;
        $object->creators = $collection->primary_object->creators;
        $object->localId = $collection->primary_object->localId;
        $object->ownerId = $collection->primary_object->ownerId;
        $object->collectionTitle = $collection->title;
        // Get link to link the result back to the collection.
        $uri = entity_uri('ting_collection', $collection);
        $object->uri = $uri['path'];
        $cached_results[] = $object;
        $number_found++;
        if ($number_found >= $number_of_objects) {
          break;
        }
      }
    }
  }
  return $cached_results;
}

function ting_inspiration_list_render_cover($cached_results, $node) {
  $results = array();
  foreach ($cached_results as $object) {
    // Add the result to an array for the "ting_search_results" theme
    // function.      
    $image = theme('ting_object_cover', array('elements' => array('#object' => $object, '#image_style' => 'ting_new_materials_cover')));
    $options = array(
      'html' => TRUE,
      'attributes' => array('title' => $object->collectionTitle),
    );
    $results[] = array(
      'snippet' => l($image, $object->uri, $options)
    );
  }
    // Set default page result.
  $content = array(
    '#theme' => 'ting_new_materials',
    '#title' => t('Inspiration'),
    '#availability_legend' => NULL,
    '#legend' => isset($legend) ? $legend : NULL,
  );

  // If any search result have been found add them to the array.
  if (!empty($results)) {
    $content['#results'] = array(
      '#theme' => 'covers_search_results',
      '#results' => $results,
    );
  }
  return $content;
}

function ting_inspiration_list_number_of_objects($node) {
  $number_per_row = variable_get('ting_genre_pages_default_number_per_row', 7);
  $number_of_rows = 3;

  $items = field_get_items('node', $node, 'field_inspiration_list_row_count');
  if (isset($items) && is_array($items) && isset($items[0]['value'])) {
    $number_of_rows = $items[0]['value'];
  }
  return $number_of_rows * $number_per_row;
}

function ting_inspiration_list_number_of_raw_result($node) {
  $items = field_get_items('node', $node, 'field_inspiration_list_raw_count');
  if (isset($items) && is_array($items) && isset($items[0]['value'])) {
    $number_of_raw_results = $items[0]['value'];
  } else {
    $number_of_raw_results = variable_get('ting_genre_pages_default_number_raw_results', 200);
  }
  return $number_of_raw_results;
}

function ting_inspiration_list_search_alma_query($alma_query_string, $number_of_results_to_fetch) {
  $ids = array();
  $alma_ids = array();
  $start_number = 1;
  $number_results_per_query = 50;
  do {
    $results = alma_search_search($alma_query_string, $start_number, $number_results_per_query);
    $start_number = $results['stop_number'] + 1;
    if (isset($results) && isset($results['alma_ids'])) {
     $alma_ids = array_merge($alma_ids, $results['alma_ids']);
    }
  } while (isset($results) && $results['stop_number'] + 1 < $results['number_of_records_total'] && $results['stop_number'] < $number_of_results_to_fetch);
  foreach ($alma_ids as $alma_id) {
    $ids[$alma_id] = array(
      'ownerId' => '773000',
      'localId' => $alma_id,
    );
  }
  return $ids ;
}


/**
 * Builds a search query string against the Data Well.
 *
 * @param type $entity
 *  A new materials entity content type.
 * @param type $limit_query
 *  If TRUE the search query will be limited to the number of months given in
 *  the entity. Default TRUE.
 * @return string
 *  Ting data well search string.
 */
function ting_inspiration_list_build_search_query($entity) {
  // Get search query from the entity.
  $items = field_get_items('node', $entity, 'field_inspiration_list_search');
  $query = $items[0]['value'];
  $query = '(' . $query . ')';

  return $query;
}



function ting_inspiration_list_get_raw_result($query, $number_of_objects = 100) {
  module_load_include('client.inc', 'ting_inspiration_list');
  $results = ting_inspiration_list_do_parallel_search($query,  $number_of_objects); 
  return $results;
}

function ting_inspiration_list_process_search_results($search_results) {
  $ids = array();
  if ($search_results) {
    foreach ($search_results as $search_result)
      if (is_array($search_result->collections)) {
        foreach ($search_result->collections as $collection) {
          foreach ($collection->objects as $object) {
            if (isset($object->ownerId) && isset($object->localId)) {
              $ids[$object->localId] = array(
                'ownerId' => $object->ownerId,
                'localId' => $object->localId,
              );
            }
          }
        }
      }
  }
  return $ids;
}

function ting_inspiration_list_get_availability_info($ids) {
  $provider_ids = array();
  foreach ($ids as $id) {
    $provider_ids[] = $id['localId'];
  }
  $availability_info = array();
  $offset = 0;
  if (count($provider_ids) > 0) {
    $holdings = alma_search_availability_holdings($provider_ids);
    foreach ($holdings as $id => $holding) {
      $availability_info[$id] = $holding;
    }
  }
  return $availability_info;
}

function ting_inspiration_list_process_availability($availablity_info, $ids) {
  if ($availablity_info) {
    foreach ($availablity_info as $id => $info) {
      $count = 0;
      if (isset($info['holdings'])) {
        foreach ($info['holdings'] as $holding) {
          if (isset($holding['total_count'])) {
            $count += $holding['total_count'];
          }
        }       
      }
      $ids[$id]['holding_count'] = $count;
    }
  }
  uasort($ids, 'ting_inspiration_list_sort_holding_count');
  return $ids;
}

function ting_inspiration_list_make_list_query($ids, $page = 0, $number_per_page = 10) {
  $query = "";
  $offset = ($page) * $number_per_page;
  if (count($ids) > $offset) {

    $result_ids = array_slice($ids, $offset, $number_per_page);
    $first = true;
    foreach ($result_ids as $id) {
      if ($first) {
        $query .= $id['localId'];
        $first = false;
      } else {
        $query .= ' OR ' . $id['localId'];
      }
    }
  }
  return $query;
}

/**
 * Performs a query against the Data Well and returns the objects.
 *
 * @param string @query
 *  The query string.
 * @param $page int
 *  The page number.
 * @return TingClientSearchResult
 *  The search result.
 *
 */
function ting_inspiration_list_do_search($query, $page = 0, $num_per_page = 10, $use_light_search = false) {
  // Load the ting client.
  module_load_include('client.inc', 'ting');

  // Build search options and ensure that they are sorted corretly.
  $options = array();
  $options['enrich'] = TRUE;
  $options['collectionType'] = 'manifestation';

  // Search the data well.
  $search_result = array();
  try {
    if ($use_light_search) {
      module_load_include('client.inc', 'ting_inspiration_list');
      $search_result = ting_inspiration_list_make_request($query, $page + 1, $num_per_page, $options);
    } else {      
      $search_result = ting_do_search($query, $page + 1, $num_per_page, $options);
    }
      
  } catch (TingClientException $e) {
    watchdog('ting_inspiration_list', 'Failed to get objects from the Data well: “@message”', array('@message' => $e->getMessage(), WATCHDOG_ERROR));
  }

  return $search_result;
}

/**
 * Callback function for sorting by holdingcounr.
 */
function ting_inspiration_list_sort_holding_count($a, $b) {
  if (!isset($a['holding_count'])) {
    return 1;
  }
  if (!isset($b['holding_count'])) {
    return -1;
  }
  if ($a['holding_count'] == $b['holding_count']) {
    return 0;
  }
  return ($a['holding_count'] < $b['holding_count']) ? 1 : -1;
}


/**
 * Gets a cached block of inpiration list in desired format.
 */
function ting_inspiration_list_get_cached_lists($query, $format) { 
  $cid = ting_inspiration_list_make_cache_string($query, $format);
   if ($cache = cache_get(ting_inspiration_list_make_cache_string($query, $format), 'cache_ting_inspiration_list')) {
     return $cache;
   } else {
     return null;
   }
}

/**
 * Sets a cached block of inpiration list in desired format.
 */
function ting_inspiration_list_set_cached_lists($node, $block) {
  $cid = _ting_inspiration_list_get_cid_from_nid($node->nid);
  // Save cache for a week.
  cache_set($cid, $block, 'cache_ting_inspiration_list', time() + 604800);
}


function ting_inspiration_list_check_covers($covers_ids) {
  $result_ids = array();
  $missing_images_local_ids = array();

  foreach ($covers_ids as $cover_id) {
    // Determine if the local id is a known negative.
    if (cache_get('ting_covers:' . $cover_id, FALSE)) {
      $result_ids[$cover_id['local_id']] = FALSE;
      break;
    }

    $path = ting_covers_object_path($cover_id['local_id']);
    if (file_exists($path)) {
      $result_ids[$cover_id['local_id']] = TRUE;
    } else {
      $missing_images_local_ids[] = (object) array(
          'localIdentifier' => $cover_id['local_id'],
          'libraryCode' => $cover_id['owner_id'],
      );
    }
  }
  $service = new AdditionalInformationService(variable_get('addi_wsdl_url'), variable_get('addi_username'), variable_get('addi_group'), variable_get('addi_password'));
  // Local ids = Faust numbers. Library object identifiers can be confusing.
  $additional_informations = $service->getByLocalIdentifier($missing_images_local_ids);
  foreach ($missing_images_local_ids as $local_id) {
    if (isset($additional_informations[$local_id->localIdentifier]) && $ai = $additional_informations[$local_id->localIdentifier]) {
      if ($ai->detailUrl) {
        $result_ids[$local_id->localIdentifier] = TRUE;
        //ting_inspiration_list_fetch_image(ting_covers_object_path($local_id->localIdentifier), $ai->detailUrll);
      } else if ($ai->thumbnailUrl) {
        $result_ids[$local_id->localIdentifier] = TRUE;
        //ting_inspiration_list_fetch_image(ting_covers_object_path($local_id->localIdentifier), $ai->thumbnailUrl);
      } else {
        $result_ids[$local_id->localIdentifier] = FALSE;
      }
    }
  }
  return $result_ids;
}

/**
 * Helper function to fetch and save a cover image file.
 *
 * @see image_style_create_derivative()
 *
 * @param string $filename
 *    File name, including its path within Drupal's file folder.
 * @param string $image_url
 *    URL for the source image file.
 * @return mixed
 *    A file object or FALSE on error.
 */
function ting_inspiration_list_fetch_image($filename, $image_url) {
  $result = drupal_http_request($image_url);

  // Bail if the HTTP request failed.
  if ($result->code != 200) {
    return FALSE;
  }

  // Get the folder for the final location of this preset.
  $directory = dirname($filename);

  // Build the destination folder tree if it doesn't already exist.
  if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    watchdog('ting_covers', 'Failed to create directory: %directory', array('%directory' => $directory), WATCHDOG_ERROR);
    return FALSE;
  }

  return file_unmanaged_save_data($result->data, $filename, FILE_EXISTS_REPLACE);
}

 

class CoverObject {

  public $title;
  public $creators;
  public $localId;
  public $ownerId;
  public $collectionTitle;
  public $uri;

}
