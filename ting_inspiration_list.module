<?php
/**
 * @file
 * Enables listing the newest materials .
 */

//include_once 'ting_inspiration_list.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_inspiration_list_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_theme().
 */
function ting_inspiration_list_theme($existing, $type, $theme, $path) {
  return array(
    'ting_inspiration_list' => array(
      'variables' => array('title' => NULL, 'legend' => NULL, 'availability_legend' => NULL, 'results' => NULL),
      'template'  => 'ting-new-materials',
      'path' => $path . '/templates',
    ),
  );
}

function ting_inspiration_list_cron() {
  ini_set('memory_limit', '512M'); // Set higher value if needed
  // Return all nids of nodes of type "page".
  $nids = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->fields('n', array('type'))
    ->condition('n.type', 'genre_page')
    ->execute()
    ->fetchCol(); // returns an indexed array
// Now return the node objects.
  $nodes = node_load_multiple($nids);

  $queue = DrupalQueue::get('get_ting_inspiration_list');
  foreach ($nodes as $node) {
    $items = field_get_items('node', $node, 'field_inspiration_list_search');
    $query = $items[0]['value'];
    //$queue->createItem($node);
    //ting_inspiration_list_get_inspration_list_covers($node);
  }
}


function ting_inspiration_list_cron_queue_info() {
  $queues['get_ting_inspiration_list'] = array(
    'worker callback' => 'ting_inspiration_list_get_inspration_list_covers',
    'time' => 1000,
  );
  return $queues;
}


function ting_inspiration_list_get_inspration_list_covers($node) {
  $number_of_raw_results = 500;

  $alma_query = field_get_items('node', $node, 'field_ddelibra_inspiration_list');
  if (!empty($alma_query[0]['value'])) {
    //Use alma to get results
    $query = $alma_query[0]['value'];
    $ids = ting_inspiration_list_search_alma_query($query, $number_of_raw_results);
  } else {
    //Use the datawell to get results. Build search query based on node fields.

    $startTime = explode(' ', microtime());

    $query = ting_inspiration_list_build_search_query($node);
    $raw_search_results = ting_inspiration_list_get_raw_result($query, $number_of_raw_results);
    $stopTime = explode(' ', microtime());
    $seconds = floatval(($stopTime[1] + $stopTime[0]) - ($startTime[1] + $startTime[0]));
    file_put_contents("/home/quickstart/work/debug/debuggenremultibrondtid.txt", print_r($seconds . ' | ', TRUE), FILE_APPEND);
    $ids = ting_inspiration_list_process_search_results($raw_search_results);
  }

  $startTime = explode(' ', microtime());
  $availablity_info = ting_inspiration_list_get_availability_info($ids);
  $stopTime = explode(' ', microtime());
  $seconds = floatval(($stopTime[1] + $stopTime[0]) - ($startTime[1] + $startTime[0]));
  file_put_contents("/home/quickstart/work/debug/debuggenremultialma.txt", print_r($seconds . ' | ', TRUE), FILE_APPEND);

  $ranked_ids = ting_inspiration_list_process_availability($availablity_info, $ids);
  $list_query = ting_inspiration_list_make_list_query($ranked_ids, 0, 20);
  $search_result = ting_inspiration_list_do_search($list_query, 0, 20);


  $content = ting_inspiration_list_build_search_result($search_result, $node);
  ting_inspiration_list_set_cached_lists($query, 'cover15', $content);
  return $content;
}

function ting_inspiration_list_build_search_result($search_result, $node) {
     $results = NULL;
  // Check if the search return any results.
  if ($search_result->numTotalObjects > 0) {
    $cover_ids = array();
    foreach ($search_result->collections as $collection) {
      $cover_ids[] = array(
        'local_id' => $collection->primary_object->localId,
        'owner_id' => $collection->primary_object->ownerId
      );
    }
    $cover_result_ids = ting_inspiration_list_check_covers($cover_ids);

    $number_of_objects = 15;
    $number_found = 0;
    $results = array();

    foreach ($search_result->collections as $collection) {
      // If there is a image
      if (isset($cover_result_ids[$collection->primary_object->localId]) && $cover_result_ids[$collection->primary_object->localId]) {

        // Get link to link the result back to the collection.
        $uri = entity_uri('ting_collection', $collection);

        // Add the result to an array for the "ting_search_results" theme
        // function.      
        $image = theme('ting_object_cover', array('elements' => array('#object' => $collection->primary_object, '#image_style' => 'ting_new_materials_cover')));
        $options = array(
          'html' => TRUE,
          'attributes' => array('title' => $collection->title),
        );
        $results[] = array(
          'snippet' => l($image, $uri['path'], $options)
        );
        $number_found++;
        if ($number_found >= $number_of_objects) {
          break;
        }
      }
    }
  }

  // Set default page result.
  $content = array(
    '#theme' => 'ting_new_materials',
    '#title' => $node->title,
    '#availability_legend' => NULL,
    '#legend' => isset($legend) ? $legend : NULL,
  );

  // If any search result have been found add them to the array.
  if (!is_null($results)) {
    $content['#results'] = array(
      '#theme' => 'covers_search_results',
      '#results' => $results,
    );
  }
  return $content;
}

function ting_inspiration_list_search_alma_query($alma_query_string, $number_of_results_to_fetch) {
  $ids = array();
  $alma_ids = array();
  $start_number = 1;
  $number_results_per_query = 50;
  do {
    $results = alma_search_search($alma_query_string, $start_number, $number_results_per_query);
    $start_number = $results['stop_number'] + 1;
    if (isset($results) && isset($results['alma_ids'])) {
     $alma_ids = array_merge($alma_ids, $results['alma_ids']);
    }
  } while (isset($results) && $results['stop_number'] + 1 < $results['number_of_records_total'] && $results['stop_number'] < $number_of_results_to_fetch);
  foreach ($alma_ids as $alma_id) {
    $ids[$alma_id] = array(
      'ownerId' => '773000',
      'localId' => $alma_id,
    );
  }
  return $ids ;
}


/**
 * Builds a search query string against the Data Well.
 *
 * @param type $entity
 *  A new materials entity content type.
 * @param type $limit_query
 *  If TRUE the search query will be limited to the number of months given in
 *  the entity. Default TRUE.
 * @return string
 *  Ting data well search string.
 */
function ting_inspiration_list_build_search_query($entity) {
  // Get search query from the entity.
  $items = field_get_items('node', $entity, 'field_inspiration_list_search');
  $query = $items[0]['value'];
  $query = '(' . $query . ')';

  return $query;
}



function ting_inspiration_list_get_raw_result($query, $number_of_objects = 100) {
  module_load_include('client.inc', 'ting_inspiration_list');
  $results = ting_inspiration_list_do_parallel_search($query,  $number_of_objects); 
  return $results;
}

function ting_inspiration_list_process_search_results($search_results) {
  $ids = array();
  if ($search_results) {
    foreach ($search_results as $search_result)
      if (is_array($search_result->collections)) {
        foreach ($search_result->collections as $collection) {
          foreach ($collection->objects as $object) {
            if (isset($object->ownerId) && isset($object->localId)) {
              $ids[$object->localId] = array(
                'ownerId' => $object->ownerId,
                'localId' => $object->localId,
              );
            }
          }
        }
      }
  }
  return $ids;
}

function ting_inspiration_list_get_availability_info($ids) {
  $provider_ids = array();
  foreach ($ids as $id) {
    if ($id['ownerId'] == '773000') {
      $provider_ids[] = $id['localId'];
    }
  }
  $availability_info = array();
  $offset = 0;
  if (count($provider_ids) > 0) {
    $holdings = alma_search_availability_holdings($provider_ids);
    foreach ($holdings as $id => $holding) {
      $availability_info[$id] = $holding;
    }
  }
  return $availability_info;
}

function ting_inspiration_list_process_availability($availablity_info, $ids) {
  if ($availablity_info) {
    foreach ($availablity_info as $id => $info) {
      $count = 0;
      if (isset($info['holdings'])) {
        foreach ($info['holdings'] as $holding) {
          if (isset($holding['total_count'])) {
            $count += $holding['total_count'];
          }
        }       
      }
      $ids[$id]['holding_count'] = $count;
    }
  }
  uasort($ids, 'ting_inspiration_list_sort_holding_count');
  return $ids;
}

function ting_inspiration_list_make_list_query($ids, $page = 0, $number_per_page = 10) {
  $query = "";
  $offset = ($page) * $number_per_page;
  if (count($ids) > $offset) {

    $result_ids = array_slice($ids, $offset, $number_per_page);
    $first = true;
    foreach ($result_ids as $id) {
      if ($first) {
        $query .= $id['localId'];
        $first = false;
      } else {
        $query .= ' OR ' . $id['localId'];
      }
    }
  }
  return $query;
}

/**
 * Performs a query against the Data Well and returns the objects.
 *
 * @param string @query
 *  The query string.
 * @param $page int
 *  The page number.
 * @return TingClientSearchResult
 *  The search result.
 *
 */
function ting_inspiration_list_do_search($query, $page = 0, $num_per_page = 10, $use_light_search = false) {
  // Load the ting client.
  module_load_include('client.inc', 'ting');

  // Build search options and ensure that they are sorted corretly.
  $options = array();
  $options['enrich'] = TRUE;
  $options['collectionType'] = 'manifestation';

  // Search the data well.
  $search_result = array();
  try {
    if ($use_light_search) {
      module_load_include('client.inc', 'ting_inspiration_list');
      $search_result = ting_inspiration_list_make_request($query, $page + 1, $num_per_page, $options);
    } else {      
      $search_result = ting_do_search($query, $page + 1, $num_per_page, $options);
    }
      
  } catch (TingClientException $e) {
    watchdog('ting_inspiration_list', 'Failed to get objects from the Data well: “@message”', array('@message' => $e->getMessage(), WATCHDOG_ERROR));
  }

  return $search_result;
}

/**
 * Callback function for sorting by holdingcounr.
 */
function ting_inspiration_list_sort_holding_count($a, $b) {
  if (!isset($a['holding_count'])) {
    return 1;
  }
  if (!isset($b['holding_count'])) {
    return -1;
  }
  if ($a['holding_count'] == $b['holding_count']) {
    return 0;
  }
  return ($a['holding_count'] < $b['holding_count']) ? 1 : -1;
}


/**
 * Gets a cached block of inpiration list in desired format.
 */
function ting_inspiration_list_get_cached_lists($query, $format) { 
  $cid = ting_inspiration_list_make_cache_string($query, $format);
   if ($cache = cache_get(ting_inspiration_list_make_cache_string($query, $format), 'cache_ting_inspiration_list')) {
     return $cache;
   } else {
     return null;
   }
}

/**
 * Sets a cached block of inpiration list in desired format.
 */
function ting_inspiration_list_set_cached_lists($query, $format, $block) {  
   $cid = ting_inspiration_list_make_cache_string($query, $format);
   // Save cache for a week.
   cache_set($cid, $block, 'cache_ting_inspiration_list', time() + 604800);
}

/**
 * Helper function to get CID.
 */
function ting_inspiration_list_make_cache_string($query, $format) {
   return md5($query . $format);
}

function ting_inspiration_list_check_covers($covers_ids) {
  $result_ids = array();
  $missing_images_local_ids = array();

  foreach ($covers_ids as $cover_id) {
    // Determine if the local id is a known negative.
    if (cache_get('ting_covers:' . $cover_id, FALSE)) {
      $result_ids[$cover_id['local_id']] = FALSE;
      break;
    }

    $path = ting_covers_object_path($cover_id['local_id']);
    if (file_exists($path)) {
      $result_ids[$cover_id['local_id']] = TRUE;
    } else {
      $missing_images_local_ids[] = (object) array(
          'localIdentifier' => $cover_id['local_id'],
          'libraryCode' => $cover_id['owner_id'],
      );
    }
  }
  $service = new AdditionalInformationService(variable_get('addi_wsdl_url'), variable_get('addi_username'), variable_get('addi_group'), variable_get('addi_password'));
  // Local ids = Faust numbers. Library object identifiers can be confusing.
  $additional_informations = $service->getByLocalIdentifier($missing_images_local_ids);
  foreach ($missing_images_local_ids as $local_id) {
    if (isset($additional_informations[$local_id->localIdentifier]) && $ai = $additional_informations[$local_id->localIdentifier]) {
      if ($ai->detailUrl) {
        $result_ids[$local_id->localIdentifier] = TRUE;
        //ting_inspiration_list_fetch_image(ting_covers_object_path($local_id->localIdentifier), $ai->detailUrll);
      } else if ($ai->thumbnailUrl) {
        $result_ids[$local_id->localIdentifier] = TRUE;
        //ting_inspiration_list_fetch_image(ting_covers_object_path($local_id->localIdentifier), $ai->thumbnailUrl);
      } else {
        $result_ids[$local_id->localIdentifier] = FALSE;
      }
    }
  }
  return $result_ids;
}

/**
 * Helper function to fetch and save a cover image file.
 *
 * @see image_style_create_derivative()
 *
 * @param string $filename
 *    File name, including its path within Drupal's file folder.
 * @param string $image_url
 *    URL for the source image file.
 * @return mixed
 *    A file object or FALSE on error.
 */
function ting_inspiration_list_fetch_image($filename, $image_url) {
  $result = ting_inspiration_list_get_by_curl ($image_url); //To get by proxy on develplatform //drupal_http_request($image_url);

  //Bail if the HTTP request failed
//  if ($result->code != 200) {
//    return FALSE;
//  }

  // Get the folder for the final location of this preset...
  $directory = dirname($filename);
  // Build the destination folder tree if it doesn't already exist.
  if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    watchdog('ting_covers', 'Failed to create directory: %directory', array('%directory' => $directory), WATCHDOG_ERROR);
    return FALSE;
  }

  return file_unmanaged_save_data($result, $filename, FILE_EXISTS_REPLACE);
}

 
//Developmentplatform has proxy
function ting_inspiration_list_get_by_curl ($url) {
$agent = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.8) Gecko/2009032609 Firefox/3.0.8';
$curl_handle=curl_init();
curl_setopt($curl_handle, CURLOPT_PROXY, '172.18.0.40:8080');
curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($curl_handle, CURLOPT_USERAGENT, $agent);
curl_setopt($curl_handle,CURLOPT_URL, $url);

return curl_exec($curl_handle);
}
